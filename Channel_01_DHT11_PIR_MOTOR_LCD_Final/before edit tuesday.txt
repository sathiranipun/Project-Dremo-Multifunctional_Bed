/*
 * Multifunctional_Bed.c
 *
 * Created: 5/25/2019 4:43:32 PM
 * Author : SATHIRA
 */ 

#define F_CPU 8000000UL
#include <stdlib.h>
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

#include "i2cmaster.h"
#include "i2c_lcd.h"
#define DHT11_PIN 5 // PD5

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DHT11 TEMP SENSOR

uint8_t c=0,I_RH,D_RH,I_Temp,D_Temp,CheckSum;

void Request()				// Microcontroller send start pulse/request 
{
	DDRD |= (1<<DHT11_PIN);
	PORTD &= ~(1<<DHT11_PIN);	
	_delay_ms(18);	
	PORTD |= (1<<DHT11_PIN);	
	
}

void Response()				/* receive response from DHT11 */
{
	DDRD &= ~(1<<DHT11_PIN);
	while(PIND & (1<<DHT11_PIN));
	while((PIND & (1<<DHT11_PIN))==0);
	while(PIND & (1<<DHT11_PIN));
	
}

uint8_t Receive_data()			/* receive data */
{
	for (int q=0; q<8; q++)
	{
		while((PIND & (1<<DHT11_PIN)) == 0);  
		_delay_us(30);
		if(PIND & (1<<DHT11_PIN))
		c = (c<<1)|(0x01);	
		else			
		c = (c<<1);
		while(PIND & (1<<DHT11_PIN));
	}
	return c;
}



int main(void)
{
	char data[5];
	lcd_init(LCD_BACKLIGHT_ON);			// Initialize LCD 
	lcd_clear();			// Clear LCD 
	lcd_goto_xy(2,0);		// column and row position 
	lcd_puts(" MULTIFUNCTIONAL");
	lcd_goto_xy(0,1);
	lcd_puts("    #_BED_#");
	_delay_ms(3000);
	lcd_clear();
	_delay_ms(1000);
	lcd_puts("Initiating...");
	_delay_ms(2000);
	lcd_clear();
	_delay_ms(1000);
	lcd_goto_xy(0,0);
	
	
	DDRB |= 1<<PINB0 | 1<<PINB1 | 1<<PINB2 | 1<<PINB3 | 1<<PINB4 ;
	DDRD &= ~(1<<PIND0) &~(1<<PIND1) &~(1<<PIND3) &~(1<<PIND4);
	
    while (1) 
    {
		lcd_puts("~ Temperature ~ ");
		DDRB = 0xFF;
		
		
		Request();		/* send start pulse */
		Response();		/* receive response */
		I_RH=Receive_data();	/* store first eight bit in I_RH */
		D_RH=Receive_data();	/* store next eight bit in D_RH */
		I_Temp=Receive_data();	/* store next eight bit in I_Temp */
		D_Temp=Receive_data();	/* store next eight bit in D_Temp */
		CheckSum=Receive_data();/* store next eight bit in CheckSum */
		
		if ((I_RH + D_RH + I_Temp + D_Temp) != CheckSum)
		{
			lcd_goto_xy(0,0);
			lcd_puts("Error");
		}
		
		else
		{
			itoa(I_Temp,data,10);
			lcd_goto_xy(5,1);
			lcd_puts(data);
			lcd_puts(".");
			
			itoa(D_Temp,data,10);
			lcd_puts(data);  
			lcd_puts("C ");
			
			DDRB |= (1<<PB1);
			if (I_Temp >= 0b00100000 )
			{
				
				lcd_goto_xy(0,0);
				lcd_puts("Cooling On   ");
				_delay_ms(1000);
				
				PORTB &= ~(1<<PB1);
				_delay_ms(1000);
				
			}
		
			else{
				PORTB |= (1<<PB1);             
				_delay_ms(1000);
			}
			
			
			/*// ldr code
			if(PIND & (1<<PIND1))
			{
				PORTB |= 1<<PB3;
				
			}
			else
			{
				PORTB &= ~(1<<PB3);
				
			}*/
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Study Table Forward
	
			int forward =1;
			
			if((PIND & (1<<PIND3)) && forward==1) // PIND3 toggle switch
			{
				PORTB |= 1<<PB3;		// study table   PB3,PB2 MOTOR
				PORTB &= ~(1<<PB2);		// study table   PB3,PB2 MOTOR
				forward=0;
				
				if(PIND & (1<<PIND4) && forward==0)    // PIND4 Limit switch 1 @ head
				{
					PORTB &= ~(1<<PB3);
					PORTB &= ~(1<<PB1);	
					PORTB |= 1<<PB4;
					//forward=1;
					if(PIND & (1<<PIND4)) 		// PIND4 limit switch head
					{
						PORTB |= 1<<PB4;		//PB4 STUDY LAMP on
						
					}
				}
				
				
				if (!(PIND & (1<<PIND4))==0)
				{
					PORTB &= ~(1<<PB2);
				}
				
			}
			else
			{
				PORTB &= ~(1<<PB3);
				PORTB &= ~(1<<PB1);
			}
			

			
			
			////// Table backward Switch
			
			if((PIND & (1<<PIND2)) && forward==0) // PIND2 reverse toggle switch
			{
				PORTB |= 1<<PB2;		// study table   PB3,PB2 MOTOR
				PORTB &= ~(1<<PB3);		// study table   PB3,PB2 MOTOR
				forward=1;
			/*else
			{
							
				PORTB &= ~(1<<PB4);
							
			}*/
			
			////////// Dimmer light
			/*
			if(PIND&(1<<PD1))
			{
				PORTA = (0b00000001);              
				_delay_ms(1000);
				
				PORTA = (0b00000011);
				
				_delay_ms(1000);
				
				PORTA = (0b00000111);              
				_delay_ms(1000);
				PORTA = (0b00001111);              
				_delay_ms(1000);
				PORTA = (0b00011111);              
				_delay_ms(1000);
				PORTA = (0b00111111);              
				_delay_ms(1000);
				PORTA = (0b01111111);              
				_delay_ms(1000);
				PORTA = (0b11111111);              
				_delay_ms(1000);
				while(PIND&(1<<PD1))
				{
					PORTB = (0b11111111);
				}
			}
			
			if (PIND&(1<<PD2))
			{
				PORTA = (0b11111111);              
				_delay_ms(1000);
				
				PORTA = (0b01111111);              
				_delay_ms(1000);
				
				PORTA = (0b00111111);              
				_delay_ms(1000);
				PORTA = (0b00011111);              
				_delay_ms(1000);
				PORTA = (0b00001111);              
				_delay_ms(1000);
				PORTA = (0b00000111);              
				_delay_ms(1000);
				PORTA = (0b00000011);             
				_delay_ms(1000);
				PORTA = (0b00000001);              
				_delay_ms(1000);
				PORTA = (0b00000000);              
				_delay_ms(1000);
				while(PIND&(1<<PD2))
				{
					PORTA = (0b00000000);
				}

			}*/
		}
		
		_delay_ms(1000);
		lcd_clear();
		_delay_ms(1000);
		}
	
		
	}
}


